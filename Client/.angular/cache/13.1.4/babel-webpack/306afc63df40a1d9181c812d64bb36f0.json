{"ast":null,"code":"import _asyncToGenerator from \"/Users/nani/Desktop/EHR-2.0/Client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport Web3 from 'web3';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./ipfs.service\";\nimport * as i2 from \"@angular/common/http\";\n\nconst Contract = require('../../build/contracts/Contract.json');\n\nexport class BlockchainService {\n  constructor(ipfsService, http) {\n    this.ipfsService = ipfsService;\n    this.http = http;\n    this.account = [];\n    this.Report = [];\n    this.getWeb3Provider().then(() => {\n      this.web3.eth.getAccounts((err, accs) => {\n        this.account = accs[0];\n        this.web3.eth.getBalance(this.account).then(r => {\n          this.balance = r;\n        });\n        this.web3.eth.getBlockNumber().then(block => {\n          this.blockNumber = block;\n          console.log(this.blockNumber);\n        });\n      });\n      this.web3.eth.net.getId().then(r => {\n        console.log(r);\n        this.netId = r;\n        this.abi = Contract.abi;\n        this.netWorkData = Contract.networks[this.netId];\n\n        if (this.netWorkData) {\n          this.address = this.netWorkData.address;\n          this.contract = this.web3.eth.Contract(this.abi, this.address);\n          this.contract.methods.getAdmin().call().then(r => {\n            this.admin = r;\n          });\n          console.log(this.admin);\n        }\n      });\n      window.ethereum.on('accountsChanged', acc => {\n        console.log(acc);\n        window.location.reload();\n      });\n    });\n    this.ipfs = ipfsService.getIPFS();\n  } //generate Report of Transactions\n\n\n  generateReport(block) {\n    for (var i = 1; i <= block; i++) {\n      this.web3.eth.getBlock(i).then(Block => {\n        this.Report.push(Block);\n      });\n    }\n  } //gets\n\n\n  getWeb3Provider() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (window.ethereum) {\n        window.web3 = new Web3(window.ethereum);\n        window.ethereum.enable();\n        console.log(window.web3);\n        _this.web3 = window.web3;\n        _this.account = _this.web3.eth.getAccounts()[0];\n        return window.web3;\n      } else if (window.web3) {\n        window.web3 = new Web3(window.web3.currentProvider);\n        return window.web3;\n      } else {\n        return window.web3;\n      }\n    })();\n  }\n\n  checkIsPatient() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      _this2.patientId = _this2.account;\n      return new Promise((resolve, reject) => {\n        _this2.getContract().then(r => {\n          console.log(r);\n          _this2.contract = r;\n\n          _this2.contract.methods.isPat(_this2.account).call().then(result => {\n            console.log(result);\n            resolve(result);\n          }).catch(err => {\n            console.log(err);\n            reject(err);\n          });\n        }).catch(err => {\n          console.log(err);\n        });\n      });\n    })();\n  } //Get Docotrs\n\n\n  getDoctors() {\n    return this.http.get('http://localhost:8000/api/doctor/');\n  } // Add patient\n\n\n  addPatient(pat_id, data) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      console.log('adding Patient');\n      return new Promise((resolve, reject) => {\n        _this3.ipfs.addJSON(data).then(IPFSHash => {\n          console.log('IPFS hash : ', IPFSHash);\n\n          _this3.contract.methods.addPatInfo(pat_id, IPFSHash).send({\n            from: _this3.account\n          }).on('confirmation', result => {\n            console.log('result', result);\n\n            if (result) {\n              _this3.http.post('http://localhost:8000/api/patient/', {\n                patID: pat_id,\n                patName: data.fName + ' ' + data.lName\n              }).subscribe(patient => {\n                resolve(patient);\n              });\n            }\n          }).catch(err => {\n            console.log('error', err);\n            reject(err);\n          });\n        });\n      });\n    })();\n  } //Add Appointment\n\n\n  addAppointment(data) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      return new Promise((resolve, reject) => {\n        _this4.http.post('http://localhost:8000/api/appointment/', data).subscribe(result => {\n          resolve(result);\n        });\n      });\n    })();\n  } //Get Docotor and Patient Count\n\n\n  getCount() {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      return new Promise((resolve, reject) => {\n        _this5.http.get('http://localhost:8000/api/getCount/').subscribe(result => {\n          resolve(result);\n        });\n      });\n    })();\n  }\n\n  getWeb3() {\n    return this.web3;\n  }\n\n  getBalance() {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      return new Promise((resolve, reject) => {\n        let check = setInterval(() => {\n          if (_this6.balance) {\n            resolve(_this6.balance);\n            clearInterval(check);\n          }\n        }, 1000);\n      });\n    })();\n  }\n\n  getTransactionBlockNumber() {\n    return this.blockNumber;\n  }\n\n  getAccount() {\n    var _this7 = this;\n\n    return _asyncToGenerator(function* () {\n      return new Promise((resolve, reject) => {\n        let check = setInterval(() => {\n          if (_this7.account != null) {\n            resolve(_this7.account);\n            clearInterval(check);\n          }\n        }, 1000);\n      });\n    })();\n  }\n\n  getContract() {\n    var _this8 = this;\n\n    return _asyncToGenerator(function* () {\n      return new Promise((resolve, reject) => {\n        let check = setInterval(() => {\n          if (_this8.contract != null) {\n            resolve(_this8.contract);\n            clearInterval(check);\n          }\n        }, 1000);\n      });\n    })();\n  }\n\n}\n\nBlockchainService.ɵfac = function BlockchainService_Factory(t) {\n  return new (t || BlockchainService)(i0.ɵɵinject(i1.IpfsService), i0.ɵɵinject(i2.HttpClient));\n};\n\nBlockchainService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: BlockchainService,\n  factory: BlockchainService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/Users/nani/Desktop/EHR-2.0/Client/src/services/blockchain.service.ts"],"names":["Web3","i0","i1","i2","Contract","require","BlockchainService","constructor","ipfsService","http","account","Report","getWeb3Provider","then","web3","eth","getAccounts","err","accs","getBalance","r","balance","getBlockNumber","block","blockNumber","console","log","net","getId","netId","abi","netWorkData","networks","address","contract","methods","getAdmin","call","admin","window","ethereum","on","acc","location","reload","ipfs","getIPFS","generateReport","i","getBlock","Block","push","enable","currentProvider","checkIsPatient","patientId","Promise","resolve","reject","getContract","isPat","result","catch","getDoctors","get","addPatient","pat_id","data","addJSON","IPFSHash","addPatInfo","send","from","post","patID","patName","fName","lName","subscribe","patient","addAppointment","getCount","getWeb3","check","setInterval","clearInterval","getTransactionBlockNumber","getAccount","ɵfac","BlockchainService_Factory","t","ɵɵinject","IpfsService","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"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","sourcesContent":["import Web3 from 'web3';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./ipfs.service\";\nimport * as i2 from \"@angular/common/http\";\nconst Contract = require('../../build/contracts/Contract.json');\nexport class BlockchainService {\n    constructor(ipfsService, http) {\n        this.ipfsService = ipfsService;\n        this.http = http;\n        this.account = [];\n        this.Report = [];\n        this.getWeb3Provider().then(() => {\n            this.web3.eth.getAccounts((err, accs) => {\n                this.account = accs[0];\n                this.web3.eth.getBalance(this.account).then((r) => {\n                    this.balance = r;\n                });\n                this.web3.eth.getBlockNumber().then((block) => {\n                    this.blockNumber = block;\n                    console.log(this.blockNumber);\n                });\n            });\n            this.web3.eth.net.getId().then((r) => {\n                console.log(r);\n                this.netId = r;\n                this.abi = Contract.abi;\n                this.netWorkData = Contract.networks[this.netId];\n                if (this.netWorkData) {\n                    this.address = this.netWorkData.address;\n                    this.contract = this.web3.eth.Contract(this.abi, this.address);\n                    this.contract.methods\n                        .getAdmin()\n                        .call()\n                        .then((r) => {\n                        this.admin = r;\n                    });\n                    console.log(this.admin);\n                }\n            });\n            window.ethereum.on('accountsChanged', (acc) => {\n                console.log(acc);\n                window.location.reload();\n            });\n        });\n        this.ipfs = ipfsService.getIPFS();\n    }\n    //generate Report of Transactions\n    generateReport(block) {\n        for (var i = 1; i <= block; i++) {\n            this.web3.eth.getBlock(i).then((Block) => {\n                this.Report.push(Block);\n            });\n        }\n    }\n    //gets\n    async getWeb3Provider() {\n        if (window.ethereum) {\n            window.web3 = new Web3(window.ethereum);\n            window.ethereum.enable();\n            console.log(window.web3);\n            this.web3 = window.web3;\n            this.account = this.web3.eth.getAccounts()[0];\n            return window.web3;\n        }\n        else if (window.web3) {\n            window.web3 = new Web3(window.web3.currentProvider);\n            return window.web3;\n        }\n        else {\n            return window.web3;\n        }\n    }\n    async checkIsPatient() {\n        this.patientId = this.account;\n        return new Promise((resolve, reject) => {\n            this.getContract()\n                .then((r) => {\n                console.log(r);\n                this.contract = r;\n                this.contract.methods\n                    .isPat(this.account)\n                    .call()\n                    .then((result) => {\n                    console.log(result);\n                    resolve(result);\n                })\n                    .catch((err) => {\n                    console.log(err);\n                    reject(err);\n                });\n            })\n                .catch((err) => {\n                console.log(err);\n            });\n        });\n    }\n    //Get Docotrs\n    getDoctors() {\n        return this.http.get('http://localhost:8000/api/doctor/');\n    }\n    // Add patient\n    async addPatient(pat_id, data) {\n        console.log('adding Patient');\n        return new Promise((resolve, reject) => {\n            this.ipfs.addJSON(data).then((IPFSHash) => {\n                console.log('IPFS hash : ', IPFSHash);\n                this.contract.methods\n                    .addPatInfo(pat_id, IPFSHash)\n                    .send({ from: this.account })\n                    .on('confirmation', (result) => {\n                    console.log('result', result);\n                    if (result) {\n                        this.http\n                            .post('http://localhost:8000/api/patient/', {\n                            patID: pat_id,\n                            patName: data.fName + ' ' + data.lName,\n                        })\n                            .subscribe((patient) => {\n                            resolve(patient);\n                        });\n                    }\n                })\n                    .catch((err) => {\n                    console.log('error', err);\n                    reject(err);\n                });\n            });\n        });\n    }\n    //Add Appointment\n    async addAppointment(data) {\n        return new Promise((resolve, reject) => {\n            this.http\n                .post('http://localhost:8000/api/appointment/', data)\n                .subscribe((result) => {\n                resolve(result);\n            });\n        });\n    }\n    //Get Docotor and Patient Count\n    async getCount() {\n        return new Promise((resolve, reject) => {\n            this.http\n                .get('http://localhost:8000/api/getCount/')\n                .subscribe((result) => {\n                resolve(result);\n            });\n        });\n    }\n    getWeb3() {\n        return this.web3;\n    }\n    async getBalance() {\n        return new Promise((resolve, reject) => {\n            let check = setInterval(() => {\n                if (this.balance) {\n                    resolve(this.balance);\n                    clearInterval(check);\n                }\n            }, 1000);\n        });\n    }\n    getTransactionBlockNumber() {\n        return this.blockNumber;\n    }\n    async getAccount() {\n        return new Promise((resolve, reject) => {\n            let check = setInterval(() => {\n                if (this.account != null) {\n                    resolve(this.account);\n                    clearInterval(check);\n                }\n            }, 1000);\n        });\n    }\n    async getContract() {\n        return new Promise((resolve, reject) => {\n            let check = setInterval(() => {\n                if (this.contract != null) {\n                    resolve(this.contract);\n                    clearInterval(check);\n                }\n            }, 1000);\n        });\n    }\n}\nBlockchainService.ɵfac = function BlockchainService_Factory(t) { return new (t || BlockchainService)(i0.ɵɵinject(i1.IpfsService), i0.ɵɵinject(i2.HttpClient)); };\nBlockchainService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: BlockchainService, factory: BlockchainService.ɵfac, providedIn: 'root' });\n"]},"metadata":{},"sourceType":"module"}