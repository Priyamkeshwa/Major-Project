{"ast":null,"code":"// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A bit simpler than readable streams.\n// Implement an async ._write(chunk, encoding, cb), and it'll handle all\n// the drain event emission and buffering.\n'use strict';\n\nmodule.exports = Writable;\n/* <replacement> */\n\nfunction WriteReq(chunk, encoding, cb) {\n  this.chunk = chunk;\n  this.encoding = encoding;\n  this.callback = cb;\n  this.next = null;\n} // It seems a linked list but it is not\n// there will be only 2 of these for each stream\n\n\nfunction CorkedRequest(state) {\n  var _this = this;\n\n  this.next = null;\n  this.entry = null;\n\n  this.finish = function () {\n    onCorkedFinish(_this, state);\n  };\n}\n/* </replacement> */\n\n/*<replacement>*/\n\n\nvar Duplex;\n/*</replacement>*/\n\nWritable.WritableState = WritableState;\n/*<replacement>*/\n\nvar internalUtil = {\n  deprecate: require('util-deprecate')\n};\n/*</replacement>*/\n\n/*<replacement>*/\n\nvar Stream = require('./internal/streams/stream');\n/*</replacement>*/\n\n\nvar Buffer = require('buffer').Buffer;\n\nvar OurUint8Array = (typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : {}).Uint8Array || function () {};\n\nfunction _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk);\n}\n\nfunction _isUint8Array(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\n\nvar destroyImpl = require('./internal/streams/destroy');\n\nvar _require = require('./internal/streams/state'),\n    getHighWaterMark = _require.getHighWaterMark;\n\nvar _require$codes = require('../errors').codes,\n    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,\n    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,\n    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,\n    ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE,\n    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED,\n    ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES,\n    ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END,\n    ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;\n\nvar errorOrDestroy = destroyImpl.errorOrDestroy;\n\nrequire('inherits')(Writable, Stream);\n\nfunction nop() {}\n\nfunction WritableState(options, stream, isDuplex) {\n  Duplex = Duplex || require('./_stream_duplex');\n  options = options || {}; // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream,\n  // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.\n\n  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag to indicate whether or not this stream\n  // contains buffers or objects.\n\n  this.objectMode = !!options.objectMode;\n  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false\n  // Note: 0 is a valid value, means that we always return false if\n  // the entire buffer is not flushed immediately on write()\n\n  this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex); // if _final has been called\n\n  this.finalCalled = false; // drain event flag.\n\n  this.needDrain = false; // at the start of calling end()\n\n  this.ending = false; // when end() has been called, and returned\n\n  this.ended = false; // when 'finish' is emitted\n\n  this.finished = false; // has it been destroyed\n\n  this.destroyed = false; // should we decode strings into buffers before passing to _write?\n  // this is here so that some node-core streams can optimize string\n  // handling at a lower level.\n\n  var noDecode = options.decodeStrings === false;\n  this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n\n  this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement\n  // of how much we're waiting to get pushed to some underlying\n  // socket or file.\n\n  this.length = 0; // a flag to see when we're in the middle of a write.\n\n  this.writing = false; // when true all writes will be buffered until .uncork() call\n\n  this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n\n  this.sync = true; // a flag to know if we're processing previously buffered items, which\n  // may call the _write() callback in the same tick, so that we don't\n  // end up in an overlapped onwrite situation.\n\n  this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)\n\n  this.onwrite = function (er) {\n    onwrite(stream, er);\n  }; // the callback that the user supplies to write(chunk,encoding,cb)\n\n\n  this.writecb = null; // the amount that is being written when _write is called.\n\n  this.writelen = 0;\n  this.bufferedRequest = null;\n  this.lastBufferedRequest = null; // number of pending user-supplied write callbacks\n  // this must be 0 before 'finish' can be emitted\n\n  this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs\n  // This is relevant for synchronous Transform streams\n\n  this.prefinished = false; // True if the error was already emitted and should not be thrown again\n\n  this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.\n\n  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')\n\n  this.autoDestroy = !!options.autoDestroy; // count buffered requests\n\n  this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always\n  // one allocated and free to use, and we maintain at most two\n\n  this.corkedRequestsFree = new CorkedRequest(this);\n}\n\nWritableState.prototype.getBuffer = function getBuffer() {\n  var current = this.bufferedRequest;\n  var out = [];\n\n  while (current) {\n    out.push(current);\n    current = current.next;\n  }\n\n  return out;\n};\n\n(function () {\n  try {\n    Object.defineProperty(WritableState.prototype, 'buffer', {\n      get: internalUtil.deprecate(function writableStateBufferGetter() {\n        return this.getBuffer();\n      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')\n    });\n  } catch (_) {}\n})(); // Test _writableState for inheritance to account for Duplex streams,\n// whose prototype chain only points to Readable.\n\n\nvar realHasInstance;\n\nif (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {\n  realHasInstance = Function.prototype[Symbol.hasInstance];\n  Object.defineProperty(Writable, Symbol.hasInstance, {\n    value: function value(object) {\n      if (realHasInstance.call(this, object)) return true;\n      if (this !== Writable) return false;\n      return object && object._writableState instanceof WritableState;\n    }\n  });\n} else {\n  realHasInstance = function realHasInstance(object) {\n    return object instanceof this;\n  };\n}\n\nfunction Writable(options) {\n  Duplex = Duplex || require('./_stream_duplex'); // Writable ctor is applied to Duplexes, too.\n  // `realHasInstance` is necessary because using plain `instanceof`\n  // would return false, as no `_writableState` property is attached.\n  // Trying to use the custom `instanceof` for Writable here will also break the\n  // Node.js LazyTransform implementation, which has a non-trivial getter for\n  // `_writableState` that would lead to infinite recursion.\n  // Checking for a Stream.Duplex instance is faster here instead of inside\n  // the WritableState constructor, at least with V8 6.5\n\n  var isDuplex = this instanceof Duplex;\n  if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);\n  this._writableState = new WritableState(options, this, isDuplex); // legacy.\n\n  this.writable = true;\n\n  if (options) {\n    if (typeof options.write === 'function') this._write = options.write;\n    if (typeof options.writev === 'function') this._writev = options.writev;\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n    if (typeof options.final === 'function') this._final = options.final;\n  }\n\n  Stream.call(this);\n} // Otherwise people can pipe Writable streams, which is just wrong.\n\n\nWritable.prototype.pipe = function () {\n  errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());\n};\n\nfunction writeAfterEnd(stream, cb) {\n  var er = new ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb\n\n  errorOrDestroy(stream, er);\n  process.nextTick(cb, er);\n} // Checks that a user-supplied chunk is valid, especially for the particular\n// mode the stream is in. Currently this means that `null` is never accepted\n// and undefined/non-string values are only allowed in object mode.\n\n\nfunction validChunk(stream, state, chunk, cb) {\n  var er;\n\n  if (chunk === null) {\n    er = new ERR_STREAM_NULL_VALUES();\n  } else if (typeof chunk !== 'string' && !state.objectMode) {\n    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer'], chunk);\n  }\n\n  if (er) {\n    errorOrDestroy(stream, er);\n    process.nextTick(cb, er);\n    return false;\n  }\n\n  return true;\n}\n\nWritable.prototype.write = function (chunk, encoding, cb) {\n  var state = this._writableState;\n  var ret = false;\n\n  var isBuf = !state.objectMode && _isUint8Array(chunk);\n\n  if (isBuf && !Buffer.isBuffer(chunk)) {\n    chunk = _uint8ArrayToBuffer(chunk);\n  }\n\n  if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;\n  if (typeof cb !== 'function') cb = nop;\n  if (state.ending) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {\n    state.pendingcb++;\n    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);\n  }\n  return ret;\n};\n\nWritable.prototype.cork = function () {\n  this._writableState.corked++;\n};\n\nWritable.prototype.uncork = function () {\n  var state = this._writableState;\n\n  if (state.corked) {\n    state.corked--;\n    if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);\n  }\n};\n\nWritable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {\n  // node::ParseEncoding() requires lower case.\n  if (typeof encoding === 'string') encoding = encoding.toLowerCase();\n  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);\n  this._writableState.defaultEncoding = encoding;\n  return this;\n};\n\nObject.defineProperty(Writable.prototype, 'writableBuffer', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState && this._writableState.getBuffer();\n  }\n});\n\nfunction decodeChunk(state, chunk, encoding) {\n  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {\n    chunk = Buffer.from(chunk, encoding);\n  }\n\n  return chunk;\n}\n\nObject.defineProperty(Writable.prototype, 'writableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState.highWaterMark;\n  }\n}); // if we're already writing something, then just put this\n// in the queue, and wait our turn.  Otherwise, call _write\n// If we return false, then we need a drain event, so set that flag.\n\nfunction writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {\n  if (!isBuf) {\n    var newChunk = decodeChunk(state, chunk, encoding);\n\n    if (chunk !== newChunk) {\n      isBuf = true;\n      encoding = 'buffer';\n      chunk = newChunk;\n    }\n  }\n\n  var len = state.objectMode ? 1 : chunk.length;\n  state.length += len;\n  var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.\n\n  if (!ret) state.needDrain = true;\n\n  if (state.writing || state.corked) {\n    var last = state.lastBufferedRequest;\n    state.lastBufferedRequest = {\n      chunk: chunk,\n      encoding: encoding,\n      isBuf: isBuf,\n      callback: cb,\n      next: null\n    };\n\n    if (last) {\n      last.next = state.lastBufferedRequest;\n    } else {\n      state.bufferedRequest = state.lastBufferedRequest;\n    }\n\n    state.bufferedRequestCount += 1;\n  } else {\n    doWrite(stream, state, false, len, chunk, encoding, cb);\n  }\n\n  return ret;\n}\n\nfunction doWrite(stream, state, writev, len, chunk, encoding, cb) {\n  state.writelen = len;\n  state.writecb = cb;\n  state.writing = true;\n  state.sync = true;\n  if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'));else if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);\n  state.sync = false;\n}\n\nfunction onwriteError(stream, state, sync, er, cb) {\n  --state.pendingcb;\n\n  if (sync) {\n    // defer the callback if we are being called synchronously\n    // to avoid piling up things on the stack\n    process.nextTick(cb, er); // this can emit finish, and it will always happen\n    // after error\n\n    process.nextTick(finishMaybe, stream, state);\n    stream._writableState.errorEmitted = true;\n    errorOrDestroy(stream, er);\n  } else {\n    // the caller expect this to happen before if\n    // it is async\n    cb(er);\n    stream._writableState.errorEmitted = true;\n    errorOrDestroy(stream, er); // this can emit finish, but finish must\n    // always follow error\n\n    finishMaybe(stream, state);\n  }\n}\n\nfunction onwriteStateUpdate(state) {\n  state.writing = false;\n  state.writecb = null;\n  state.length -= state.writelen;\n  state.writelen = 0;\n}\n\nfunction onwrite(stream, er) {\n  var state = stream._writableState;\n  var sync = state.sync;\n  var cb = state.writecb;\n  if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();\n  onwriteStateUpdate(state);\n  if (er) onwriteError(stream, state, sync, er, cb);else {\n    // Check if we're actually ready to finish, but don't emit yet\n    var finished = needFinish(state) || stream.destroyed;\n\n    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {\n      clearBuffer(stream, state);\n    }\n\n    if (sync) {\n      process.nextTick(afterWrite, stream, state, finished, cb);\n    } else {\n      afterWrite(stream, state, finished, cb);\n    }\n  }\n}\n\nfunction afterWrite(stream, state, finished, cb) {\n  if (!finished) onwriteDrain(stream, state);\n  state.pendingcb--;\n  cb();\n  finishMaybe(stream, state);\n} // Must force callback to be called on nextTick, so that we don't\n// emit 'drain' before the write() consumer gets the 'false' return\n// value, and has a chance to attach a 'drain' listener.\n\n\nfunction onwriteDrain(stream, state) {\n  if (state.length === 0 && state.needDrain) {\n    state.needDrain = false;\n    stream.emit('drain');\n  }\n} // if there's something in the buffer waiting, then process it\n\n\nfunction clearBuffer(stream, state) {\n  state.bufferProcessing = true;\n  var entry = state.bufferedRequest;\n\n  if (stream._writev && entry && entry.next) {\n    // Fast case, write everything using _writev()\n    var l = state.bufferedRequestCount;\n    var buffer = new Array(l);\n    var holder = state.corkedRequestsFree;\n    holder.entry = entry;\n    var count = 0;\n    var allBuffers = true;\n\n    while (entry) {\n      buffer[count] = entry;\n      if (!entry.isBuf) allBuffers = false;\n      entry = entry.next;\n      count += 1;\n    }\n\n    buffer.allBuffers = allBuffers;\n    doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time\n    // as the hot path ends with doWrite\n\n    state.pendingcb++;\n    state.lastBufferedRequest = null;\n\n    if (holder.next) {\n      state.corkedRequestsFree = holder.next;\n      holder.next = null;\n    } else {\n      state.corkedRequestsFree = new CorkedRequest(state);\n    }\n\n    state.bufferedRequestCount = 0;\n  } else {\n    // Slow case, write chunks one-by-one\n    while (entry) {\n      var chunk = entry.chunk;\n      var encoding = entry.encoding;\n      var cb = entry.callback;\n      var len = state.objectMode ? 1 : chunk.length;\n      doWrite(stream, state, false, len, chunk, encoding, cb);\n      entry = entry.next;\n      state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then\n      // it means that we need to wait until it does.\n      // also, that means that the chunk and cb are currently\n      // being processed, so move the buffer counter past them.\n\n      if (state.writing) {\n        break;\n      }\n    }\n\n    if (entry === null) state.lastBufferedRequest = null;\n  }\n\n  state.bufferedRequest = entry;\n  state.bufferProcessing = false;\n}\n\nWritable.prototype._write = function (chunk, encoding, cb) {\n  cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));\n};\n\nWritable.prototype._writev = null;\n\nWritable.prototype.end = function (chunk, encoding, cb) {\n  var state = this._writableState;\n\n  if (typeof chunk === 'function') {\n    cb = chunk;\n    chunk = null;\n    encoding = null;\n  } else if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks\n\n  if (state.corked) {\n    state.corked = 1;\n    this.uncork();\n  } // ignore unnecessary end() calls.\n\n\n  if (!state.ending) endWritable(this, state, cb);\n  return this;\n};\n\nObject.defineProperty(Writable.prototype, 'writableLength', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState.length;\n  }\n});\n\nfunction needFinish(state) {\n  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;\n}\n\nfunction callFinal(stream, state) {\n  stream._final(function (err) {\n    state.pendingcb--;\n\n    if (err) {\n      errorOrDestroy(stream, err);\n    }\n\n    state.prefinished = true;\n    stream.emit('prefinish');\n    finishMaybe(stream, state);\n  });\n}\n\nfunction prefinish(stream, state) {\n  if (!state.prefinished && !state.finalCalled) {\n    if (typeof stream._final === 'function' && !state.destroyed) {\n      state.pendingcb++;\n      state.finalCalled = true;\n      process.nextTick(callFinal, stream, state);\n    } else {\n      state.prefinished = true;\n      stream.emit('prefinish');\n    }\n  }\n}\n\nfunction finishMaybe(stream, state) {\n  var need = needFinish(state);\n\n  if (need) {\n    prefinish(stream, state);\n\n    if (state.pendingcb === 0) {\n      state.finished = true;\n      stream.emit('finish');\n\n      if (state.autoDestroy) {\n        // In case of duplex streams we need a way to detect\n        // if the readable side is ready for autoDestroy as well\n        var rState = stream._readableState;\n\n        if (!rState || rState.autoDestroy && rState.endEmitted) {\n          stream.destroy();\n        }\n      }\n    }\n  }\n\n  return need;\n}\n\nfunction endWritable(stream, state, cb) {\n  state.ending = true;\n  finishMaybe(stream, state);\n\n  if (cb) {\n    if (state.finished) process.nextTick(cb);else stream.once('finish', cb);\n  }\n\n  state.ended = true;\n  stream.writable = false;\n}\n\nfunction onCorkedFinish(corkReq, state, err) {\n  var entry = corkReq.entry;\n  corkReq.entry = null;\n\n  while (entry) {\n    var cb = entry.callback;\n    state.pendingcb--;\n    cb(err);\n    entry = entry.next;\n  } // reuse the free corkReq.\n\n\n  state.corkedRequestsFree.next = corkReq;\n}\n\nObject.defineProperty(Writable.prototype, 'destroyed', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    if (this._writableState === undefined) {\n      return false;\n    }\n\n    return this._writableState.destroyed;\n  },\n  set: function set(value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._writableState) {\n      return;\n    } // backward compatibility, the user is explicitly\n    // managing destroyed\n\n\n    this._writableState.destroyed = value;\n  }\n});\nWritable.prototype.destroy = destroyImpl.destroy;\nWritable.prototype._undestroy = destroyImpl.undestroy;\n\nWritable.prototype._destroy = function (err, cb) {\n  cb(err);\n};","map":{"version":3,"sources":["/Users/nani/Desktop/EHR-2.0/Client/node_modules/readable-stream/lib/_stream_writable.js"],"names":["module","exports","Writable","WriteReq","chunk","encoding","cb","callback","next","CorkedRequest","state","_this","entry","finish","onCorkedFinish","Duplex","WritableState","internalUtil","deprecate","require","Stream","Buffer","OurUint8Array","global","window","self","Uint8Array","_uint8ArrayToBuffer","from","_isUint8Array","obj","isBuffer","destroyImpl","_require","getHighWaterMark","_require$codes","codes","ERR_INVALID_ARG_TYPE","ERR_METHOD_NOT_IMPLEMENTED","ERR_MULTIPLE_CALLBACK","ERR_STREAM_CANNOT_PIPE","ERR_STREAM_DESTROYED","ERR_STREAM_NULL_VALUES","ERR_STREAM_WRITE_AFTER_END","ERR_UNKNOWN_ENCODING","errorOrDestroy","nop","options","stream","isDuplex","objectMode","writableObjectMode","highWaterMark","finalCalled","needDrain","ending","ended","finished","destroyed","noDecode","decodeStrings","defaultEncoding","length","writing","corked","sync","bufferProcessing","onwrite","er","writecb","writelen","bufferedRequest","lastBufferedRequest","pendingcb","prefinished","errorEmitted","emitClose","autoDestroy","bufferedRequestCount","corkedRequestsFree","prototype","getBuffer","current","out","push","Object","defineProperty","get","writableStateBufferGetter","_","realHasInstance","Symbol","hasInstance","Function","value","object","call","_writableState","writable","write","_write","writev","_writev","destroy","_destroy","final","_final","pipe","writeAfterEnd","process","nextTick","validChunk","ret","isBuf","writeOrBuffer","cork","uncork","clearBuffer","setDefaultEncoding","toLowerCase","indexOf","enumerable","decodeChunk","newChunk","len","last","doWrite","onwriteError","finishMaybe","onwriteStateUpdate","needFinish","afterWrite","onwriteDrain","emit","l","buffer","Array","holder","count","allBuffers","end","undefined","endWritable","callFinal","err","prefinish","need","rState","_readableState","endEmitted","once","corkReq","set","_undestroy","undestroy"],"mappings":"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","sourcesContent":["// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// A bit simpler than readable streams.\n// Implement an async ._write(chunk, encoding, cb), and it'll handle all\n// the drain event emission and buffering.\n\n'use strict';\n\nmodule.exports = Writable;\n\n/* <replacement> */\nfunction WriteReq(chunk, encoding, cb) {\n  this.chunk = chunk;\n  this.encoding = encoding;\n  this.callback = cb;\n  this.next = null;\n}\n\n// It seems a linked list but it is not\n// there will be only 2 of these for each stream\nfunction CorkedRequest(state) {\n  var _this = this;\n  this.next = null;\n  this.entry = null;\n  this.finish = function () {\n    onCorkedFinish(_this, state);\n  };\n}\n/* </replacement> */\n\n/*<replacement>*/\nvar Duplex;\n/*</replacement>*/\n\nWritable.WritableState = WritableState;\n\n/*<replacement>*/\nvar internalUtil = {\n  deprecate: require('util-deprecate')\n};\n/*</replacement>*/\n\n/*<replacement>*/\nvar Stream = require('./internal/streams/stream');\n/*</replacement>*/\n\nvar Buffer = require('buffer').Buffer;\nvar OurUint8Array = (typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : {}).Uint8Array || function () {};\nfunction _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk);\n}\nfunction _isUint8Array(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\nvar destroyImpl = require('./internal/streams/destroy');\nvar _require = require('./internal/streams/state'),\n  getHighWaterMark = _require.getHighWaterMark;\nvar _require$codes = require('../errors').codes,\n  ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,\n  ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,\n  ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,\n  ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE,\n  ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED,\n  ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES,\n  ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END,\n  ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;\nvar errorOrDestroy = destroyImpl.errorOrDestroy;\nrequire('inherits')(Writable, Stream);\nfunction nop() {}\nfunction WritableState(options, stream, isDuplex) {\n  Duplex = Duplex || require('./_stream_duplex');\n  options = options || {};\n\n  // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream,\n  // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.\n  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex;\n\n  // object stream flag to indicate whether or not this stream\n  // contains buffers or objects.\n  this.objectMode = !!options.objectMode;\n  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;\n\n  // the point at which write() starts returning false\n  // Note: 0 is a valid value, means that we always return false if\n  // the entire buffer is not flushed immediately on write()\n  this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex);\n\n  // if _final has been called\n  this.finalCalled = false;\n\n  // drain event flag.\n  this.needDrain = false;\n  // at the start of calling end()\n  this.ending = false;\n  // when end() has been called, and returned\n  this.ended = false;\n  // when 'finish' is emitted\n  this.finished = false;\n\n  // has it been destroyed\n  this.destroyed = false;\n\n  // should we decode strings into buffers before passing to _write?\n  // this is here so that some node-core streams can optimize string\n  // handling at a lower level.\n  var noDecode = options.decodeStrings === false;\n  this.decodeStrings = !noDecode;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // not an actual buffer we keep track of, but a measurement\n  // of how much we're waiting to get pushed to some underlying\n  // socket or file.\n  this.length = 0;\n\n  // a flag to see when we're in the middle of a write.\n  this.writing = false;\n\n  // when true all writes will be buffered until .uncork() call\n  this.corked = 0;\n\n  // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n  this.sync = true;\n\n  // a flag to know if we're processing previously buffered items, which\n  // may call the _write() callback in the same tick, so that we don't\n  // end up in an overlapped onwrite situation.\n  this.bufferProcessing = false;\n\n  // the callback that's passed to _write(chunk,cb)\n  this.onwrite = function (er) {\n    onwrite(stream, er);\n  };\n\n  // the callback that the user supplies to write(chunk,encoding,cb)\n  this.writecb = null;\n\n  // the amount that is being written when _write is called.\n  this.writelen = 0;\n  this.bufferedRequest = null;\n  this.lastBufferedRequest = null;\n\n  // number of pending user-supplied write callbacks\n  // this must be 0 before 'finish' can be emitted\n  this.pendingcb = 0;\n\n  // emit prefinish if the only thing we're waiting for is _write cbs\n  // This is relevant for synchronous Transform streams\n  this.prefinished = false;\n\n  // True if the error was already emitted and should not be thrown again\n  this.errorEmitted = false;\n\n  // Should close be emitted on destroy. Defaults to true.\n  this.emitClose = options.emitClose !== false;\n\n  // Should .destroy() be called after 'finish' (and potentially 'end')\n  this.autoDestroy = !!options.autoDestroy;\n\n  // count buffered requests\n  this.bufferedRequestCount = 0;\n\n  // allocate the first CorkedRequest, there is always\n  // one allocated and free to use, and we maintain at most two\n  this.corkedRequestsFree = new CorkedRequest(this);\n}\nWritableState.prototype.getBuffer = function getBuffer() {\n  var current = this.bufferedRequest;\n  var out = [];\n  while (current) {\n    out.push(current);\n    current = current.next;\n  }\n  return out;\n};\n(function () {\n  try {\n    Object.defineProperty(WritableState.prototype, 'buffer', {\n      get: internalUtil.deprecate(function writableStateBufferGetter() {\n        return this.getBuffer();\n      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')\n    });\n  } catch (_) {}\n})();\n\n// Test _writableState for inheritance to account for Duplex streams,\n// whose prototype chain only points to Readable.\nvar realHasInstance;\nif (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {\n  realHasInstance = Function.prototype[Symbol.hasInstance];\n  Object.defineProperty(Writable, Symbol.hasInstance, {\n    value: function value(object) {\n      if (realHasInstance.call(this, object)) return true;\n      if (this !== Writable) return false;\n      return object && object._writableState instanceof WritableState;\n    }\n  });\n} else {\n  realHasInstance = function realHasInstance(object) {\n    return object instanceof this;\n  };\n}\nfunction Writable(options) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  // Writable ctor is applied to Duplexes, too.\n  // `realHasInstance` is necessary because using plain `instanceof`\n  // would return false, as no `_writableState` property is attached.\n\n  // Trying to use the custom `instanceof` for Writable here will also break the\n  // Node.js LazyTransform implementation, which has a non-trivial getter for\n  // `_writableState` that would lead to infinite recursion.\n\n  // Checking for a Stream.Duplex instance is faster here instead of inside\n  // the WritableState constructor, at least with V8 6.5\n  var isDuplex = this instanceof Duplex;\n  if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);\n  this._writableState = new WritableState(options, this, isDuplex);\n\n  // legacy.\n  this.writable = true;\n  if (options) {\n    if (typeof options.write === 'function') this._write = options.write;\n    if (typeof options.writev === 'function') this._writev = options.writev;\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n    if (typeof options.final === 'function') this._final = options.final;\n  }\n  Stream.call(this);\n}\n\n// Otherwise people can pipe Writable streams, which is just wrong.\nWritable.prototype.pipe = function () {\n  errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());\n};\nfunction writeAfterEnd(stream, cb) {\n  var er = new ERR_STREAM_WRITE_AFTER_END();\n  // TODO: defer error events consistently everywhere, not just the cb\n  errorOrDestroy(stream, er);\n  process.nextTick(cb, er);\n}\n\n// Checks that a user-supplied chunk is valid, especially for the particular\n// mode the stream is in. Currently this means that `null` is never accepted\n// and undefined/non-string values are only allowed in object mode.\nfunction validChunk(stream, state, chunk, cb) {\n  var er;\n  if (chunk === null) {\n    er = new ERR_STREAM_NULL_VALUES();\n  } else if (typeof chunk !== 'string' && !state.objectMode) {\n    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer'], chunk);\n  }\n  if (er) {\n    errorOrDestroy(stream, er);\n    process.nextTick(cb, er);\n    return false;\n  }\n  return true;\n}\nWritable.prototype.write = function (chunk, encoding, cb) {\n  var state = this._writableState;\n  var ret = false;\n  var isBuf = !state.objectMode && _isUint8Array(chunk);\n  if (isBuf && !Buffer.isBuffer(chunk)) {\n    chunk = _uint8ArrayToBuffer(chunk);\n  }\n  if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;\n  if (typeof cb !== 'function') cb = nop;\n  if (state.ending) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {\n    state.pendingcb++;\n    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);\n  }\n  return ret;\n};\nWritable.prototype.cork = function () {\n  this._writableState.corked++;\n};\nWritable.prototype.uncork = function () {\n  var state = this._writableState;\n  if (state.corked) {\n    state.corked--;\n    if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);\n  }\n};\nWritable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {\n  // node::ParseEncoding() requires lower case.\n  if (typeof encoding === 'string') encoding = encoding.toLowerCase();\n  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);\n  this._writableState.defaultEncoding = encoding;\n  return this;\n};\nObject.defineProperty(Writable.prototype, 'writableBuffer', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState && this._writableState.getBuffer();\n  }\n});\nfunction decodeChunk(state, chunk, encoding) {\n  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {\n    chunk = Buffer.from(chunk, encoding);\n  }\n  return chunk;\n}\nObject.defineProperty(Writable.prototype, 'writableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState.highWaterMark;\n  }\n});\n\n// if we're already writing something, then just put this\n// in the queue, and wait our turn.  Otherwise, call _write\n// If we return false, then we need a drain event, so set that flag.\nfunction writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {\n  if (!isBuf) {\n    var newChunk = decodeChunk(state, chunk, encoding);\n    if (chunk !== newChunk) {\n      isBuf = true;\n      encoding = 'buffer';\n      chunk = newChunk;\n    }\n  }\n  var len = state.objectMode ? 1 : chunk.length;\n  state.length += len;\n  var ret = state.length < state.highWaterMark;\n  // we must ensure that previous needDrain will not be reset to false.\n  if (!ret) state.needDrain = true;\n  if (state.writing || state.corked) {\n    var last = state.lastBufferedRequest;\n    state.lastBufferedRequest = {\n      chunk: chunk,\n      encoding: encoding,\n      isBuf: isBuf,\n      callback: cb,\n      next: null\n    };\n    if (last) {\n      last.next = state.lastBufferedRequest;\n    } else {\n      state.bufferedRequest = state.lastBufferedRequest;\n    }\n    state.bufferedRequestCount += 1;\n  } else {\n    doWrite(stream, state, false, len, chunk, encoding, cb);\n  }\n  return ret;\n}\nfunction doWrite(stream, state, writev, len, chunk, encoding, cb) {\n  state.writelen = len;\n  state.writecb = cb;\n  state.writing = true;\n  state.sync = true;\n  if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'));else if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);\n  state.sync = false;\n}\nfunction onwriteError(stream, state, sync, er, cb) {\n  --state.pendingcb;\n  if (sync) {\n    // defer the callback if we are being called synchronously\n    // to avoid piling up things on the stack\n    process.nextTick(cb, er);\n    // this can emit finish, and it will always happen\n    // after error\n    process.nextTick(finishMaybe, stream, state);\n    stream._writableState.errorEmitted = true;\n    errorOrDestroy(stream, er);\n  } else {\n    // the caller expect this to happen before if\n    // it is async\n    cb(er);\n    stream._writableState.errorEmitted = true;\n    errorOrDestroy(stream, er);\n    // this can emit finish, but finish must\n    // always follow error\n    finishMaybe(stream, state);\n  }\n}\nfunction onwriteStateUpdate(state) {\n  state.writing = false;\n  state.writecb = null;\n  state.length -= state.writelen;\n  state.writelen = 0;\n}\nfunction onwrite(stream, er) {\n  var state = stream._writableState;\n  var sync = state.sync;\n  var cb = state.writecb;\n  if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();\n  onwriteStateUpdate(state);\n  if (er) onwriteError(stream, state, sync, er, cb);else {\n    // Check if we're actually ready to finish, but don't emit yet\n    var finished = needFinish(state) || stream.destroyed;\n    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {\n      clearBuffer(stream, state);\n    }\n    if (sync) {\n      process.nextTick(afterWrite, stream, state, finished, cb);\n    } else {\n      afterWrite(stream, state, finished, cb);\n    }\n  }\n}\nfunction afterWrite(stream, state, finished, cb) {\n  if (!finished) onwriteDrain(stream, state);\n  state.pendingcb--;\n  cb();\n  finishMaybe(stream, state);\n}\n\n// Must force callback to be called on nextTick, so that we don't\n// emit 'drain' before the write() consumer gets the 'false' return\n// value, and has a chance to attach a 'drain' listener.\nfunction onwriteDrain(stream, state) {\n  if (state.length === 0 && state.needDrain) {\n    state.needDrain = false;\n    stream.emit('drain');\n  }\n}\n\n// if there's something in the buffer waiting, then process it\nfunction clearBuffer(stream, state) {\n  state.bufferProcessing = true;\n  var entry = state.bufferedRequest;\n  if (stream._writev && entry && entry.next) {\n    // Fast case, write everything using _writev()\n    var l = state.bufferedRequestCount;\n    var buffer = new Array(l);\n    var holder = state.corkedRequestsFree;\n    holder.entry = entry;\n    var count = 0;\n    var allBuffers = true;\n    while (entry) {\n      buffer[count] = entry;\n      if (!entry.isBuf) allBuffers = false;\n      entry = entry.next;\n      count += 1;\n    }\n    buffer.allBuffers = allBuffers;\n    doWrite(stream, state, true, state.length, buffer, '', holder.finish);\n\n    // doWrite is almost always async, defer these to save a bit of time\n    // as the hot path ends with doWrite\n    state.pendingcb++;\n    state.lastBufferedRequest = null;\n    if (holder.next) {\n      state.corkedRequestsFree = holder.next;\n      holder.next = null;\n    } else {\n      state.corkedRequestsFree = new CorkedRequest(state);\n    }\n    state.bufferedRequestCount = 0;\n  } else {\n    // Slow case, write chunks one-by-one\n    while (entry) {\n      var chunk = entry.chunk;\n      var encoding = entry.encoding;\n      var cb = entry.callback;\n      var len = state.objectMode ? 1 : chunk.length;\n      doWrite(stream, state, false, len, chunk, encoding, cb);\n      entry = entry.next;\n      state.bufferedRequestCount--;\n      // if we didn't call the onwrite immediately, then\n      // it means that we need to wait until it does.\n      // also, that means that the chunk and cb are currently\n      // being processed, so move the buffer counter past them.\n      if (state.writing) {\n        break;\n      }\n    }\n    if (entry === null) state.lastBufferedRequest = null;\n  }\n  state.bufferedRequest = entry;\n  state.bufferProcessing = false;\n}\nWritable.prototype._write = function (chunk, encoding, cb) {\n  cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));\n};\nWritable.prototype._writev = null;\nWritable.prototype.end = function (chunk, encoding, cb) {\n  var state = this._writableState;\n  if (typeof chunk === 'function') {\n    cb = chunk;\n    chunk = null;\n    encoding = null;\n  } else if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);\n\n  // .end() fully uncorks\n  if (state.corked) {\n    state.corked = 1;\n    this.uncork();\n  }\n\n  // ignore unnecessary end() calls.\n  if (!state.ending) endWritable(this, state, cb);\n  return this;\n};\nObject.defineProperty(Writable.prototype, 'writableLength', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState.length;\n  }\n});\nfunction needFinish(state) {\n  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;\n}\nfunction callFinal(stream, state) {\n  stream._final(function (err) {\n    state.pendingcb--;\n    if (err) {\n      errorOrDestroy(stream, err);\n    }\n    state.prefinished = true;\n    stream.emit('prefinish');\n    finishMaybe(stream, state);\n  });\n}\nfunction prefinish(stream, state) {\n  if (!state.prefinished && !state.finalCalled) {\n    if (typeof stream._final === 'function' && !state.destroyed) {\n      state.pendingcb++;\n      state.finalCalled = true;\n      process.nextTick(callFinal, stream, state);\n    } else {\n      state.prefinished = true;\n      stream.emit('prefinish');\n    }\n  }\n}\nfunction finishMaybe(stream, state) {\n  var need = needFinish(state);\n  if (need) {\n    prefinish(stream, state);\n    if (state.pendingcb === 0) {\n      state.finished = true;\n      stream.emit('finish');\n      if (state.autoDestroy) {\n        // In case of duplex streams we need a way to detect\n        // if the readable side is ready for autoDestroy as well\n        var rState = stream._readableState;\n        if (!rState || rState.autoDestroy && rState.endEmitted) {\n          stream.destroy();\n        }\n      }\n    }\n  }\n  return need;\n}\nfunction endWritable(stream, state, cb) {\n  state.ending = true;\n  finishMaybe(stream, state);\n  if (cb) {\n    if (state.finished) process.nextTick(cb);else stream.once('finish', cb);\n  }\n  state.ended = true;\n  stream.writable = false;\n}\nfunction onCorkedFinish(corkReq, state, err) {\n  var entry = corkReq.entry;\n  corkReq.entry = null;\n  while (entry) {\n    var cb = entry.callback;\n    state.pendingcb--;\n    cb(err);\n    entry = entry.next;\n  }\n\n  // reuse the free corkReq.\n  state.corkedRequestsFree.next = corkReq;\n}\nObject.defineProperty(Writable.prototype, 'destroyed', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    if (this._writableState === undefined) {\n      return false;\n    }\n    return this._writableState.destroyed;\n  },\n  set: function set(value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._writableState) {\n      return;\n    }\n\n    // backward compatibility, the user is explicitly\n    // managing destroyed\n    this._writableState.destroyed = value;\n  }\n});\nWritable.prototype.destroy = destroyImpl.destroy;\nWritable.prototype._undestroy = destroyImpl.undestroy;\nWritable.prototype._destroy = function (err, cb) {\n  cb(err);\n};"]},"metadata":{},"sourceType":"script"}