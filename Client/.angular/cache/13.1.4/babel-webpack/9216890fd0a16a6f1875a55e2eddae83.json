{"ast":null,"code":"import _asyncToGenerator from \"/Users/nani/Desktop/EHR-2.0/Client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { localAPI } from \"src/environments/environment\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/services/blockchain.service\";\nimport * as i2 from \"src/services/ipfs.service\";\nimport * as i3 from \"@angular/common/http\";\nexport class DoctorService {\n  constructor(blockchainService, ipfsService, http) {\n    this.blockchainService = blockchainService;\n    this.ipfsService = ipfsService;\n    this.http = http;\n    this.isDoctor = false;\n    this.Doctors = [];\n    this.checkComplete = false;\n    this.DoctorDetails = {};\n    this.PatientDetails = {};\n    this.patientId = \"\";\n    this.Appointments = [];\n    this.web3 = blockchainService.getWeb3();\n    this.contract = blockchainService.getContract();\n    this.account = blockchainService.getAccount();\n    this.ipfs = ipfsService.getIPFS();\n  }\n\n  getDoctor() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      return new Promise((resolve, reject) => {\n        let check = setInterval(() => {\n          if (_this.account != \"undefined\") {\n            _this.http.get(\"http://localhost:8000/api/doctor/\" + _this.blockchainService.account + \"/\").subscribe(result => {\n              resolve(result.data);\n              clearInterval(check);\n            });\n          }\n        }, 1000);\n      });\n    })();\n  }\n\n  checkIsPatient(id) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      _this2.patientId = id;\n      console.log(id);\n      return new Promise((resolve, reject) => {\n        _this2.blockchainService.getContract().then(r => {\n          _this2.contract = r;\n\n          _this2.contract.methods.isPat(id).call().then(result => {\n            console.log(result);\n            resolve(result);\n          }).catch(err => {\n            console.log(err);\n            reject(err);\n          });\n        }).catch(err => {\n          console.log(err);\n        });\n      });\n    })();\n  }\n\n  getPatientDetails(id) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      return new Promise((resolve, reject) => {\n        _this3.contract.methods.getPatInfo(id).call().then(result => {\n          console.log(result);\n\n          _this3.http.get(localAPI + result).subscribe(data => {\n            console.log(data);\n            resolve(data);\n          });\n        }).catch(err => {\n          console.log(err);\n          reject(err);\n        });\n      });\n    })();\n  }\n\n  savePatientMedRecord(data, id) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      console.log(_this4.patientId, data);\n      let PatientData = {\n        doctor: _this4.account,\n        data: data,\n        date: Date.now()\n      };\n      return new Promise((resolve, reject) => {\n        _this4.getPatientRecords(_this4.patientId).then(record => {\n          console.log(record);\n          let PatientRecord;\n\n          if (record != null) {\n            record[\"MedRecord\"].push(PatientData);\n            PatientRecord = record;\n          } else {\n            PatientRecord = {\n              MedRecord: [PatientData]\n            };\n          }\n\n          console.log(PatientRecord);\n\n          _this4.ipfs.addJSON(PatientRecord).then(IPFSHash => {\n            console.log(IPFSHash);\n\n            _this4.contract.methods.addMedRecord(IPFSHash, _this4.patientId).send({\n              from: _this4.account\n            }).on(\"confirmation\", result => {\n              console.log(result);\n\n              _this4.http.put(\"http://localhost:8000/api/appointment/\" + id, {}).subscribe(result => {\n                console.log(result);\n              });\n\n              resolve(result);\n            }).on(\"error\", err => {\n              console.log(err);\n              reject(err);\n            });\n          }).catch(err => {\n            console.log(err);\n            reject(err);\n          });\n        }).catch(err => {\n          console.log(err);\n          reject(err);\n        });\n      });\n    })();\n  }\n\n  updatePatientRecord(data, id) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      _this5.patientId = id;\n      return new Promise((resolve, reject) => {\n        let PatientRecord;\n        console.log(data.length);\n\n        if (data.length >= 1) {\n          PatientRecord = {\n            MedRecord: data\n          };\n        } else {\n          PatientRecord = null;\n        }\n\n        _this5.ipfs.addJSON(PatientRecord).then(IPFSHash => {\n          console.log(IPFSHash);\n\n          _this5.contract.methods.addMedRecord(IPFSHash, _this5.patientId).send({\n            from: _this5.account\n          }).on(\"confirmation\", result => {\n            console.log(result);\n            resolve(result);\n          }).on(\"error\", err => {\n            console.log(err);\n            reject(err);\n          });\n        }).catch(err => {\n          console.log(err);\n          reject(err);\n        });\n      });\n    })();\n  }\n\n  getPatientRecords(id) {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      return new Promise((resolve, reject) => {\n        _this6.blockchainService.getContract().then(r => {\n          _this6.contract = r;\n\n          _this6.contract.methods.viewMedRec(id).call().then(result => {\n            console.log(result);\n\n            if (result.length >= 1) {\n              _this6.http.get(\"http://127.0.0.1:8080/ipfs/\" + result).subscribe(data => {\n                console.log(data);\n                resolve(data);\n              });\n            } else {\n              resolve(null);\n            }\n          }).catch(err => {\n            console.log(err);\n            reject(err);\n          });\n        });\n      });\n    })();\n  }\n\n  checkIsDr() {\n    var _this7 = this;\n\n    return _asyncToGenerator(function* () {\n      return new Promise((resolve, reject) => {\n        _this7.blockchainService.getContract().then(contract => {\n          contract.methods.isDr(_this7.blockchainService.account).call().then(result => {\n            console.log(result);\n            resolve(1);\n          }).catch(err => {\n            console.log(err);\n            reject(null);\n          });\n        });\n      });\n    })();\n  }\n\n  getDocAppointments() {\n    var _this8 = this;\n\n    return _asyncToGenerator(function* () {\n      return new Promise((resolve, reject) => {\n        console.log(_this8.getAppointments.length);\n\n        if (_this8.getAppointments.length) {\n          resolve(_this8.Appointments);\n        }\n\n        let check = setInterval(() => {\n          _this8.account = _this8.blockchainService.account;\n\n          if (_this8.account) {\n            console.log(typeof _this8.account);\n\n            _this8.http.get(\"http://localhost:8000/api/getAppointmentDoc/\" + _this8.account).subscribe(result => {\n              console.log(result.data);\n              resolve(result);\n              clearInterval(check);\n            });\n          }\n        }, 1000);\n      });\n    })();\n  }\n\n  getAppointments() {\n    return this.Appointments;\n  }\n\n  setAppointments(appointment) {\n    this.Appointments = appointment;\n  }\n\n}\n\nDoctorService.ɵfac = function DoctorService_Factory(t) {\n  return new (t || DoctorService)(i0.ɵɵinject(i1.BlockchainService), i0.ɵɵinject(i2.IpfsService), i0.ɵɵinject(i3.HttpClient));\n};\n\nDoctorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DoctorService,\n  factory: DoctorService.ɵfac,\n  providedIn: \"root\"\n});","map":{"version":3,"sources":["/Users/nani/Desktop/EHR-2.0/Client/src/doctor/services/doctor.service.ts"],"names":["localAPI","i0","i1","i2","i3","DoctorService","constructor","blockchainService","ipfsService","http","isDoctor","Doctors","checkComplete","DoctorDetails","PatientDetails","patientId","Appointments","web3","getWeb3","contract","getContract","account","getAccount","ipfs","getIPFS","getDoctor","Promise","resolve","reject","check","setInterval","get","subscribe","result","data","clearInterval","checkIsPatient","id","console","log","then","r","methods","isPat","call","catch","err","getPatientDetails","getPatInfo","savePatientMedRecord","PatientData","doctor","date","Date","now","getPatientRecords","record","PatientRecord","push","MedRecord","addJSON","IPFSHash","addMedRecord","send","from","on","put","updatePatientRecord","length","viewMedRec","checkIsDr","isDr","getDocAppointments","getAppointments","setAppointments","appointment","ɵfac","DoctorService_Factory","t","ɵɵinject","BlockchainService","IpfsService","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"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","sourcesContent":["import { localAPI } from \"src/environments/environment\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/services/blockchain.service\";\nimport * as i2 from \"src/services/ipfs.service\";\nimport * as i3 from \"@angular/common/http\";\nexport class DoctorService {\n    constructor(blockchainService, ipfsService, http) {\n        this.blockchainService = blockchainService;\n        this.ipfsService = ipfsService;\n        this.http = http;\n        this.isDoctor = false;\n        this.Doctors = [];\n        this.checkComplete = false;\n        this.DoctorDetails = {};\n        this.PatientDetails = {};\n        this.patientId = \"\";\n        this.Appointments = [];\n        this.web3 = blockchainService.getWeb3();\n        this.contract = blockchainService.getContract();\n        this.account = blockchainService.getAccount();\n        this.ipfs = ipfsService.getIPFS();\n    }\n    async getDoctor() {\n        return new Promise((resolve, reject) => {\n            let check = setInterval(() => {\n                if (this.account != \"undefined\") {\n                    this.http\n                        .get(\"http://localhost:8000/api/doctor/\" +\n                        this.blockchainService.account + \"/\")\n                        .subscribe((result) => {\n                        resolve(result.data);\n                        clearInterval(check);\n                    });\n                }\n            }, 1000);\n        });\n    }\n    async checkIsPatient(id) {\n        this.patientId = id;\n        console.log(id);\n        return new Promise((resolve, reject) => {\n            this.blockchainService\n                .getContract()\n                .then((r) => {\n                this.contract = r;\n                this.contract.methods\n                    .isPat(id)\n                    .call()\n                    .then((result) => {\n                    console.log(result);\n                    resolve(result);\n                })\n                    .catch((err) => {\n                    console.log(err);\n                    reject(err);\n                });\n            })\n                .catch((err) => {\n                console.log(err);\n            });\n        });\n    }\n    async getPatientDetails(id) {\n        return new Promise((resolve, reject) => {\n            this.contract.methods\n                .getPatInfo(id)\n                .call()\n                .then((result) => {\n                console.log(result);\n                this.http\n                    .get(localAPI + result)\n                    .subscribe((data) => {\n                    console.log(data);\n                    resolve(data);\n                });\n            })\n                .catch((err) => {\n                console.log(err);\n                reject(err);\n            });\n        });\n    }\n    async savePatientMedRecord(data, id) {\n        console.log(this.patientId, data);\n        let PatientData = {\n            doctor: this.account,\n            data: data,\n            date: Date.now(),\n        };\n        return new Promise((resolve, reject) => {\n            this.getPatientRecords(this.patientId)\n                .then((record) => {\n                console.log(record);\n                let PatientRecord;\n                if (record != null) {\n                    record[\"MedRecord\"].push(PatientData);\n                    PatientRecord = record;\n                }\n                else {\n                    PatientRecord = { MedRecord: [PatientData] };\n                }\n                console.log(PatientRecord);\n                this.ipfs\n                    .addJSON(PatientRecord)\n                    .then((IPFSHash) => {\n                    console.log(IPFSHash);\n                    this.contract.methods\n                        .addMedRecord(IPFSHash, this.patientId)\n                        .send({ from: this.account })\n                        .on(\"confirmation\", (result) => {\n                        console.log(result);\n                        this.http\n                            .put(\"http://localhost:8000/api/appointment/\" + id, {})\n                            .subscribe((result) => {\n                            console.log(result);\n                        });\n                        resolve(result);\n                    })\n                        .on(\"error\", (err) => {\n                        console.log(err);\n                        reject(err);\n                    });\n                })\n                    .catch((err) => {\n                    console.log(err);\n                    reject(err);\n                });\n            })\n                .catch((err) => {\n                console.log(err);\n                reject(err);\n            });\n        });\n    }\n    async updatePatientRecord(data, id) {\n        this.patientId = id;\n        return new Promise((resolve, reject) => {\n            let PatientRecord;\n            console.log(data.length);\n            if (data.length >= 1) {\n                PatientRecord = { MedRecord: data };\n            }\n            else {\n                PatientRecord = null;\n            }\n            this.ipfs\n                .addJSON(PatientRecord)\n                .then((IPFSHash) => {\n                console.log(IPFSHash);\n                this.contract.methods\n                    .addMedRecord(IPFSHash, this.patientId)\n                    .send({ from: this.account })\n                    .on(\"confirmation\", (result) => {\n                    console.log(result);\n                    resolve(result);\n                })\n                    .on(\"error\", (err) => {\n                    console.log(err);\n                    reject(err);\n                });\n            })\n                .catch((err) => {\n                console.log(err);\n                reject(err);\n            });\n        });\n    }\n    async getPatientRecords(id) {\n        return new Promise((resolve, reject) => {\n            this.blockchainService.getContract().then((r) => {\n                this.contract = r;\n                this.contract.methods\n                    .viewMedRec(id)\n                    .call()\n                    .then((result) => {\n                    console.log(result);\n                    if (result.length >= 1) {\n                        this.http\n                            .get(\"http://127.0.0.1:8080/ipfs/\" + result)\n                            .subscribe((data) => {\n                            console.log(data);\n                            resolve(data);\n                        });\n                    }\n                    else {\n                        resolve(null);\n                    }\n                })\n                    .catch((err) => {\n                    console.log(err);\n                    reject(err);\n                });\n            });\n        });\n    }\n    async checkIsDr() {\n        return new Promise((resolve, reject) => {\n            this.blockchainService.getContract().then((contract) => {\n                contract.methods\n                    .isDr(this.blockchainService.account)\n                    .call()\n                    .then((result) => {\n                    console.log(result);\n                    resolve(1);\n                })\n                    .catch((err) => {\n                    console.log(err);\n                    reject(null);\n                });\n            });\n        });\n    }\n    async getDocAppointments() {\n        return new Promise((resolve, reject) => {\n            console.log(this.getAppointments.length);\n            if (this.getAppointments.length) {\n                resolve(this.Appointments);\n            }\n            let check = setInterval(() => {\n                this.account = this.blockchainService.account;\n                if (this.account) {\n                    console.log(typeof this.account);\n                    this.http\n                        .get(\"http://localhost:8000/api/getAppointmentDoc/\" + this.account)\n                        .subscribe((result) => {\n                        console.log(result.data);\n                        resolve(result);\n                        clearInterval(check);\n                    });\n                }\n            }, 1000);\n        });\n    }\n    getAppointments() {\n        return this.Appointments;\n    }\n    setAppointments(appointment) {\n        this.Appointments = appointment;\n    }\n}\nDoctorService.ɵfac = function DoctorService_Factory(t) { return new (t || DoctorService)(i0.ɵɵinject(i1.BlockchainService), i0.ɵɵinject(i2.IpfsService), i0.ɵɵinject(i3.HttpClient)); };\nDoctorService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: DoctorService, factory: DoctorService.ɵfac, providedIn: \"root\" });\n"]},"metadata":{},"sourceType":"module"}