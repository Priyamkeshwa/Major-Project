{"ast":null,"code":"import _asyncToGenerator from \"/Users/nani/Desktop/EHR-2.0/Client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/services/blockchain.service\";\nimport * as i2 from \"src/services/ipfs.service\";\nimport * as i3 from \"@angular/common/http\";\n\nconst Contract = require(\"../../../build/contracts/Contract.json\");\n\nexport class DoctorService {\n  constructor(blockChainService, ipfsService, http) {\n    this.blockChainService = blockChainService;\n    this.ipfsService = ipfsService;\n    this.http = http;\n    this.API = \"http://localhost:8000/api/doctor/\";\n    this.abi = {};\n    this.netWorkData = {};\n    this.msg_text = \"\";\n    this.DoctorDetails = [];\n    this.drInfoload = false; //GET BlockChain Service\n\n    this.web3 = blockChainService.getWeb3();\n    this.web3.eth.getAccounts((err, accs) => {\n      this.account = accs[0];\n    });\n    this.web3.eth.net.getId().then(r => {\n      this.netId = r;\n      this.abi = Contract.abi;\n      this.netWorkData = Contract.networks[this.netId];\n      console.log(this.netWorkData);\n\n      if (this.netWorkData) {\n        this.address = this.netWorkData.address;\n        this.contract = this.web3.eth.Contract(this.abi, this.address);\n        console.log(this.contract.methods.getAdmin.call());\n        this.Doctors = this.contract.methods.getAllDrs.call().then(docs => {\n          this.Doctors = docs;\n          console.log(this.Doctors);\n        });\n        console.log(\"Doctors\", this.Doctors);\n      } else {\n        console.log(\"Contract not Deployed\");\n      }\n    }); //IPFS\n\n    this.ipfs = ipfsService.getIPFS();\n  }\n\n  addDoctor(data) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      return new Promise((resolve, reject) => {\n        console.log(data.get(\"docID\"));\n\n        _this.contract.methods.addDoctor(data.get(\"docID\")).send({\n          from: _this.account\n        }).on(\"confirmation\", r => {\n          _this.http.post(_this.API, data).subscribe(result => {\n            resolve(result);\n          });\n        }).on(\"error\", error => {\n          console.log(error);\n          reject(error);\n        });\n      });\n    })();\n  }\n\n  deleteDoctor(id, docID) {\n    console.log(id);\n    return new Promise((resolve, reject) => {\n      this.http.delete(this.API + docID + \"/\").subscribe(res => {\n        console.log(res);\n\n        if (res.data) {\n          this.contract.methods.delDoctor(docID).send({\n            from: this.account\n          }).on(\"confirmation\", r => {\n            this.http.delete(this.API + docID + \"/\").subscribe(res => {\n              if (res.data) {\n                resolve(true);\n              }\n            });\n          });\n        } else {\n          reject(false);\n        }\n      });\n    });\n  }\n\n  getDoctors() {\n    return this.http.get(this.API);\n  }\n\n}\n\nDoctorService.ɵfac = function DoctorService_Factory(t) {\n  return new (t || DoctorService)(i0.ɵɵinject(i1.BlockchainService), i0.ɵɵinject(i2.IpfsService), i0.ɵɵinject(i3.HttpClient));\n};\n\nDoctorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DoctorService,\n  factory: DoctorService.ɵfac,\n  providedIn: \"root\"\n});","map":{"version":3,"sources":["/Users/nani/Desktop/EHR-2.0/Client/src/admin/services/doctor.service.ts"],"names":["i0","i1","i2","i3","Contract","require","DoctorService","constructor","blockChainService","ipfsService","http","API","abi","netWorkData","msg_text","DoctorDetails","drInfoload","web3","getWeb3","eth","getAccounts","err","accs","account","net","getId","then","r","netId","networks","console","log","address","contract","methods","getAdmin","call","Doctors","getAllDrs","docs","ipfs","getIPFS","addDoctor","data","Promise","resolve","reject","get","send","from","on","post","subscribe","result","error","deleteDoctor","id","docID","delete","res","delDoctor","getDoctors","ɵfac","DoctorService_Factory","t","ɵɵinject","BlockchainService","IpfsService","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"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","sourcesContent":["import * as i0 from \"@angular/core\";\nimport * as i1 from \"src/services/blockchain.service\";\nimport * as i2 from \"src/services/ipfs.service\";\nimport * as i3 from \"@angular/common/http\";\nconst Contract = require(\"../../../build/contracts/Contract.json\");\nexport class DoctorService {\n    constructor(blockChainService, ipfsService, http) {\n        this.blockChainService = blockChainService;\n        this.ipfsService = ipfsService;\n        this.http = http;\n        this.API = \"http://localhost:8000/api/doctor/\";\n        this.abi = {};\n        this.netWorkData = {};\n        this.msg_text = \"\";\n        this.DoctorDetails = [];\n        this.drInfoload = false;\n        //GET BlockChain Service\n        this.web3 = blockChainService.getWeb3();\n        this.web3.eth.getAccounts((err, accs) => {\n            this.account = accs[0];\n        });\n        this.web3.eth.net.getId().then((r) => {\n            this.netId = r;\n            this.abi = Contract.abi;\n            this.netWorkData = Contract.networks[this.netId];\n            console.log(this.netWorkData);\n            if (this.netWorkData) {\n                this.address = this.netWorkData.address;\n                this.contract = this.web3.eth.Contract(this.abi, this.address);\n                console.log(this.contract.methods.getAdmin.call());\n                this.Doctors = this.contract.methods.getAllDrs\n                    .call()\n                    .then((docs) => {\n                    this.Doctors = docs;\n                    console.log(this.Doctors);\n                });\n                console.log(\"Doctors\", this.Doctors);\n            }\n            else {\n                console.log(\"Contract not Deployed\");\n            }\n        });\n        //IPFS\n        this.ipfs = ipfsService.getIPFS();\n    }\n    async addDoctor(data) {\n        return new Promise((resolve, reject) => {\n            console.log(data.get(\"docID\"));\n            this.contract.methods\n                .addDoctor(data.get(\"docID\"))\n                .send({ from: this.account })\n                .on(\"confirmation\", (r) => {\n                this.http.post(this.API, data).subscribe((result) => {\n                    resolve(result);\n                });\n            })\n                .on(\"error\", (error) => {\n                console.log(error);\n                reject(error);\n            });\n        });\n    }\n    deleteDoctor(id, docID) {\n        console.log(id);\n        return new Promise((resolve, reject) => {\n            this.http.delete(this.API + docID + \"/\").subscribe((res) => {\n                console.log(res);\n                if (res.data) {\n                    this.contract.methods\n                        .delDoctor(docID)\n                        .send({ from: this.account })\n                        .on(\"confirmation\", (r) => {\n                        this.http.delete(this.API + docID + \"/\").subscribe((res) => {\n                            if (res.data) {\n                                resolve(true);\n                            }\n                        });\n                    });\n                }\n                else {\n                    reject(false);\n                }\n            });\n        });\n    }\n    getDoctors() {\n        return this.http.get(this.API);\n    }\n}\nDoctorService.ɵfac = function DoctorService_Factory(t) { return new (t || DoctorService)(i0.ɵɵinject(i1.BlockchainService), i0.ɵɵinject(i2.IpfsService), i0.ɵɵinject(i3.HttpClient)); };\nDoctorService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: DoctorService, factory: DoctorService.ɵfac, providedIn: \"root\" });\n"]},"metadata":{},"sourceType":"module"}